// app/api/slices/route.ts
import { NextResponse } from 'next/server';
import path from 'path';
import fs from 'fs/promises';

export async function GET() {
  try {
    // Read the slice usage details JSON file generated by your script
    const filePath = path.join(process.cwd(), 'artifacts/sliceUsageDetails.json');
    const sliceIndexPath = path.join(process.cwd(), 'artifacts/sliceIndex.json');
    
    // Check if files exist
    const [sliceUsageExists, sliceIndexExists] = await Promise.all([
      fs.access(filePath).then(() => true).catch(() => false),
      fs.access(sliceIndexPath).then(() => true).catch(() => false)
    ]);

    if (!sliceUsageExists || !sliceIndexExists) {
      return NextResponse.json(
        { error: 'Slice data not found. Please run the slice analysis script first.' },
        { status: 404 }
      );
    }

    // Read both files
    const [sliceUsageData, sliceIndexData] = await Promise.all([
      fs.readFile(filePath, 'utf-8').then(data => JSON.parse(data)),
      fs.readFile(sliceIndexPath, 'utf-8').then(data => JSON.parse(data))
    ]);

    // Transform the data to match the dashboard format
    const libraries = transformSliceData(sliceIndexData, sliceUsageData);

    return NextResponse.json({
      libraries,
      sliceCounts: sliceUsageData,
      lastUpdated: new Date().toISOString()
    });

  } catch (error) {
    console.error('Error reading slice data:', error);
    return NextResponse.json(
      { error: 'Failed to load slice data' },
      { status: 500 }
    );
  }
}

function transformSliceData(sliceIndex: any[], sliceUsage: any) {
  const librariesMap = new Map();

  sliceIndex.forEach((slice: any) => {
    const libraryName = slice.libraryID.split("/").pop()!.charAt(0).toUpperCase() + 
                       slice.libraryID.split("/").pop()!.slice(1);

    if (!librariesMap.has(libraryName)) {
      librariesMap.set(libraryName, {
        library: libraryName,
        slices: []
      });
    }

    const library = librariesMap.get(libraryName);
    const sliceCount = sliceUsage[slice.model.id]?.total || 0;

    library.slices.push({
      name: slice.model.name,
      id: slice.model.id,
      count: sliceCount,
      variations: slice.model.variations.map((variation: any) => ({
        name: variation.name,
        id: variation.id,
        count: sliceUsage[slice.model.id]?.variations[variation.id]?.count || 0
      }))
    });
  });

  return Array.from(librariesMap.values());
}